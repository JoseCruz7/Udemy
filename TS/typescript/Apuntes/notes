-------------------CREACION DE VARIABLES DE CLASES -------------------

- let today : Date = new Date();
- let spiderman: string | number | Date

//Se establecer las propiedades de cada variable del objeto name: string, year:number
- let object = {
    name: 'peter',
    year: 30
}

-------------------COMO IGNORAR ARCHIVOS DE TSC ---------------------------
- Ruta tsconfig.json, se agrega una caracteristica "exclude": ["typesScript"], al principiio

------------------- TEMPLATE STRING TYPESCRIPT ----------------------------
const name: string = 'Jose Cruz';
const lastName: string = 'Herrera';
const year: number = 33;

const menssage: string = `My name is: ${name} ${lastName} and my year is: ${year}`;
console.log(menssage);


---------ARGUMENTO DE UNA FUNCION DE FORMA OBLIGATORIA-OPCIONAL-DEFAULT-----
//LOS NORMAL DE OS ARGUMENTOS ES QUE SE DECLAREN
/*
- OBLIGATORIOOS
- OPCIONALES
- DEFAULT
*/
function active(who: string, moment?: string, object: string = 'BatiseÃ±al') {}

----------------FUNCIONES DE FLECHA QUE SE COLOCO EN LA ESTRUCTURA ES6--------
const myArrow = (Arg1, Arg2) => Arg1 + Arg2;

//El this tendra problemas ya que apunta al objeto del setTimeout
POR ESO SE DEBE EJECUTAR UNA FUNCION DE FLECHA
setTimeout(function(){
    console.log(this.name) //This apunto al objeto 
},1000) = Sirve para ejecutar un Callback


const thisFuntion = {
    name:'Ironman',
    menssage(){
        setTimeout(()=>{
            console.log(`Poder del personaje ${this.name} dinero`)
        },1000)
    }
}

------------------- DESESTRUCTURACION DE UN OBJETO --------------------------

    var name = avenger.name, key = avenger.key, power = avenger.power;
    console.log(name + " \n " + key + " \n " + power + " ");

    //EXTRAER ARGUMENTOS DE UN OBJETO DENTRO DE UNA VARIABLE DE FLECHA
    var extract = function (_a) {
        var name = _a.name, key = _a.key, power = _a.power;
        console.log(name + " \n " + key + " \n " + power + " ");
    };
    extract(avenger);

      /*PARA LA DES ESTRUCTURACION DE UN ARREGLO SE REALIZA CON LOS [] Y SE ESTABLE NOMBRE 
    EN CADA POSICION PORE EJEMPLO CONST [1,2,3] PUEDE SER CUALQUIER NOVMBRE PERO APUNTARAN
    A LA POSICION DEL ARREGO QUE SE ESTA APUNTANDO [UNOO, DOS, TRES]*/

    cont extractArray = ([,,3]: string[]) =>{
        console.log(3);
    })

    extractArray(array)


    -------------------------PROMESAS CONCEPTO----------------------
    (()=>{

    //UNA PROMESA NO ES UNA SENTENCIA BLOQUEANTE
console.log('inicio');

//LA FUNCION PROMISE DEBE DE LLEVAR 2 ARGUMENTOS (RESOLVE, REJECT)
const Promesa = new Promise((resolve, reject) => {
    setTimeout(() => {
        reject('Todo salio bien en la promesa');
    }, 1000);
});

//AL EJECUTAR LA PROMESA RECIBE DOS METODOS .THEN O .CACH
Promesa
        .then(menssage => console.log(menssage)) //Empieza a ejecutar el resolve
        .catch(error => console.warn(error));      // Si existe un error de parte de la promesa 

console.log('Fin');
})()

--------------------------------------PROMESA Y SOLUCION DE UN PROBLEMA DE RETIRO DE BANCO-----------------------------

(() => {
    /*debo realizar una funcion para retirar dinero validando el valor actual  
    retornando un promesa de tipo number*/

    //La funcion solicita un parametro money que es de tipo number y retornara una promesa tipo string
    const getMoney = (money: number): Promise<string> => {

        let moneyActually:number = 1000;

        return new Promise((resolve, reject) => {
            if (money > moneyActually) {
                reject('Error en la solucion')
            } else {
                moneyActually -= money
                resolve(`money required: ${money} \n and money git you: ${money} \n Your money in the bank is: ${moneyActually}`)
            }
        })
    }


    //Se ejecuta la promesa indicancon con el then lo que responde el resolve y en el catch retorna lo de reject
getMoney(500).then(moneyInBanck => console.log(moneyInBanck)).catch(console.warn);

})()



/* -------------------------------------------------------------------------- */
/*    Creacion de variables he inicializado directamente en el constructor    */
/* -------------------------------------------------------------------------- */

    class Avenger{
        constructor(public name: string,
                    public team: string,
                    public realName: string,
                    public figth: boolean,
                    public winFigth: number
                    ){

        }
    }

    const antman: Avenger = new Avenger();

PARA EXPORTAR UNA CLASE SE DEBE DE COLOCAR EXPORT E IMPORT EN EL OTRO ARCHIVO